//
// Generated file, do not edit! Created by nedtool 5.7 from attacks/controlmessages/droppingAttack/DSAK_DroppingMessage.msg.
//

#ifndef __DSAK_DROPPINGMESSAGE_M_H
#define __DSAK_DROPPINGMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>attacks/controlmessages/droppingAttack/DSAK_DroppingMessage.msg:2</tt> by nedtool.
 * <pre>
 * message DSAK_DroppingMessage
 * {
 *     double droppingAttackProbability; // Attack probability
 * }
 * </pre>
 */
class DSAK_DroppingMessage : public ::omnetpp::cMessage
{
  protected:
    double droppingAttackProbability;

  private:
    void copy(const DSAK_DroppingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DSAK_DroppingMessage&);

  public:
    DSAK_DroppingMessage(const char *name=nullptr, short kind=0);
    DSAK_DroppingMessage(const DSAK_DroppingMessage& other);
    virtual ~DSAK_DroppingMessage();
    DSAK_DroppingMessage& operator=(const DSAK_DroppingMessage& other);
    virtual DSAK_DroppingMessage *dup() const override {return new DSAK_DroppingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getDroppingAttackProbability() const;
    virtual void setDroppingAttackProbability(double droppingAttackProbability);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DSAK_DroppingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DSAK_DroppingMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __DSAK_DROPPINGMESSAGE_M_H

